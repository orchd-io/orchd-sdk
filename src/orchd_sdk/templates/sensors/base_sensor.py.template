import asyncio
import logging

from orchd_sdk.models import SensorTemplate, Event
from orchd_sdk.sensor import AbstractSensor, AbstractCommunicator, SensorState


logger = logging.getLogger(__name__)


class $sensor_class_name (AbstractSensor):
    """
    Sensor that emits XYZ events.
    """
    template = SensorTemplate(
        name='$sensor_name',
        description='$description',
        version='$version',
        sensor='$sensor_class_fqn',
        communicator='$communicator_class_fqn',
        parameters=$parameters,
        sensing_interval=$sensing_interval
    )

    def __init__(self, sensor_template,  communicator):
        super().__init__(sensor_template, communicator or '$communicator_class_fqn')
        self.state = SensorState.READY


    async def sense(self):
        logger.info(f'{self.template.sensor}')
        await self.communicator.emit_event(
            Event(event_name='io.orchd.events.system.Test', data={'dummy': 'data'})
        )