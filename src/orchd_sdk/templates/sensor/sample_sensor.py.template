import asyncio

from orchd_sdk.models import SensorTemplate, Event
from orchd_sdk.sensor import AbstractSensor, AbstractCommunicator, SensorState


class $sensor_name (AbstractSensor):
    """
    Sensor that emits XYZ events.
    """
    def __init__(self, sensor_template,  communicator: $communicator_class):
        super().__init__(sensor_template, communicator)
        self.state = SensorState.READY

    template = SensorTemplate(
        name=$name,
        description=$description,
        version=$version,
        sensor=$sensor_class,
        communicator=$communicator_class,
        parameters=$parameters,
        sensing_interval=$sensing_interval
    )

    async def sense(self):
        await asyncio.sleep(1)
        await self.communicator.emit_event(
            Event(event_name='io.orchd.events.system.Test', data={'dummy': 'data'})
        )